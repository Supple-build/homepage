/* ==========================================================================
settings.defaults
/  ========================================================================== */

@use 'sass:math';
@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use 'layers';

/* --------------------------------------------------------------------------
Baseline
/  -------------------------------------------------------------------------- */

$baseline: 4px !default;

/* --------------------------------------------------------------------------
Responsive
Define your breakpoints with px values. These will be converted to ems.
/  -------------------------------------------------------------------------- */

$breakpoints: (
	palm: 320px,
	lap: 640px,
	desk: 960px,
	wall: 1280px,
) !default;

/* --------------------------------------------------------------------------
Spacing
/  -------------------------------------------------------------------------- */

$spacing: (
	nano: 1,
	micro: 2,
	milli: 4,
	base: 6,
	kilo: 10,
	mega: 14,
	giga: 18,
	tera: 22,
) !default;

/* --------------------------------------------------------------------------
Typography
/  -------------------------------------------------------------------------- */

$type-scale: (
	300: (
		palm: 16px,
		desk: 20px,
	),
	400: (
		palm: 20px,
		desk: 24px,
	),
	500: (
		palm: 24px,
		desk: 32px,
	),
	600: (
		palm: 32px,
		desk: 40px,
	),
	700: (
		palm: 40px,
		desk: 48px,
	),
	800: (
		palm: 48px,
		desk: 60px,
	),
	900: (
		palm: 60px,
		desk: 72px,
	),
) !default;

$heading-mapping: (
	1: 900,
	2: 800,
	3: 700,
	4: 600,
	5: 500,
	6: 400,
) !default;

/* --------------------------------------------------------------------------
Constants
/  -------------------------------------------------------------------------- */

$browser-font-size: 16px;

/* --------------------------------------------------------------------------
Checks
A couple of checks to ensure the settings are correct
/  -------------------------------------------------------------------------- */

@if math.unit($baseline) != 'px' {
	@error '`$baseline: #{$baseline}` needs to be a pixel unit.';
}

/**
 * check that breakpoints are defined in px
 */
@each $key, $value in $breakpoints {
	@if type-of($value) == number {
		@if math.unit($value) != 'px' {
			@error 'Breakpoint `#{$key}: #{$value}` needs to be a pixel unit.';
		}
	} @else {
		@error '`#{$key}: #{$value}` needs to be a number.';
	}
}

/**
 * Check if `$spacing` has the mandatory `base` entry
 */
@if not map.has-key($spacing, 'base') {
	@error '`$spacing` needs to contain atleast one entry named 'base' since supple-css internally relies on this.';
}

/**
 * Check if `$type-scale` has the mandatory `400` entry
 */
@if not map.has-key($type-scale, '400') {
	@error '`$type-scale` needs to contain atleast one entry named '400' since supple-css internally relies on this being the base font size.';
}

/**
 * Check if `$type-scale` has is only using px values and uses correct breakpoints.
 */
@each $name, $value in $type-scale {
	@if meta.type-of($value) == map {
		@if list.length($value) != 2 {
			@error 'The value for "#{$name}" in $type-scale is invalid. It should contain only 2 breakpoints when you want it to be fluid.';
		} @else {
			@each $key, $itemValue in $value {
				@if not map.has-key($breakpoints, $key) {
					@error 'The breakpoint `#{$key}` in $type-scale is not defined in $breakpoints.';
				}
				@if math.unit($itemValue) != 'px' {
					@error 'Scale `#{$itemValue}` needs to be a pixel unit.';
				}
			}
		}
	} @else {
		@if math.unit($value) != 'px' {
			@error 'Scale `#{$name}: #{$value}` needs to be a pixel unit.';
		}
	}
}

/**
 * Check if `$spacing` has is only using unitless values and uses correct breakpoints.
 */
@each $name, $value in $spacing {
	@if meta.type-of($value) == map {
		@if list.length($value) != 2 {
			@error 'The value for "#{$name}" in $spacing is invalid. It should contain only 2 breakpoints when you want it to be fluid.';
		} @else {
			@each $key, $itemValue in $value {
				@if not map.has-key($breakpoints, $key) {
					@error 'The breakpoint `#{$key}` in $spacing is not defined in $breakpoints.';
				}
				@if math.is-unitless($itemValue) == false {
					@error '`#{$key}: #{$itemValue}` needs to be unitless.';
				}
				@if $itemValue != math.ceil($itemValue) {
					@error '`#{$key}: #{$itemValue}` needs to be an integer.';
				}
			}
		}
	} @else {
		@if math.is-unitless($value) == false {
			@error '`#{$name}: #{$value}` needs to be unitless.';
		}
		@if $value != math.ceil($value) {
			@error '`#{$name}: #{$value}` needs to be an integer.';
		}
	}
}

/**
 * Check if $heading-mapping are valid heading levels and valid keys in $type-scale
 */
$heading-levels: (1, 2, 3, 4, 5, 6);

@if list.length($heading-mapping) != 6 {
	@error 'The heading-mapping should contain 6 entries.';
}

@each $name, $value in $heading-mapping {
	@if not map.has-key($type-scale, $value) {
		@error 'The value for "#{$name}" in $heading-mapping is invalid. It should be a valid key in $type-scale.';
	}

	@if not list.index($heading-levels, $name) {
		@error 'The value for "#{$name}" in $heading-mapping is invalid. It should be a valid heading level.';
	}
}
